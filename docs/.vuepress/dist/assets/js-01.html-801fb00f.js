import{_ as n,p as a,q as s,a1 as e}from"./framework-34d4cddf.js";const t={},o=e(`<h2 id="最新javascript面试题" tabindex="-1"><a class="header-anchor" href="#最新javascript面试题" aria-hidden="true">#</a> 最新javascript面试题</h2><h3 id="javascript的变量有哪些类型" tabindex="-1"><a class="header-anchor" href="#javascript的变量有哪些类型" aria-hidden="true">#</a> <code>JavaScript</code>的变量有哪些类型？</h3><ul><li>分为两种：基础类型和引用类型。基础类型目前有六种，分别是<code>boolean</code>、<code>null</code>、<code>undefined</code>、<code>number</code>、<code>string</code>、<code>symbol</code>、<code>bigint</code></li><li>除了以上的基础类型之外，其他就是引用类型了<code>Object</code></li></ul><h3 id="基础类型和引用的区别" tabindex="-1"><a class="header-anchor" href="#基础类型和引用的区别" aria-hidden="true">#</a> 基础类型和引用的区别？</h3><ul><li>它们在内存中存储的方式不同。基础类型存储的是值，而引用类型存储的是指向内存中某个空间的指针；</li><li>基础类型赋值就是把值赋给另外一个变量，而引用类型的赋值是赋值的原来变量的指针，所以当引用类型发生改变时，只要是指向同一个指针的变量的都会发生改变。</li></ul><h3 id="函数参数是对象时会发生什么问题" tabindex="-1"><a class="header-anchor" href="#函数参数是对象时会发生什么问题" aria-hidden="true">#</a> 函数参数是对象时会发生什么问题？</h3><ul><li>函数参数是对象时，相当于是将对象的指针传递给了函数，如果在函数的内部改变了对象的值，外面对象的值也会发生改变，数组也是如此。</li></ul><h3 id="typeof和instanceof判断变量类型的区别" tabindex="-1"><a class="header-anchor" href="#typeof和instanceof判断变量类型的区别" aria-hidden="true">#</a> <code>typeof</code>和<code>instanceof</code>判断变量类型的区别？</h3><ul><li><code>typeof</code>对于基础类型除了<code>null</code>以外都可以显示正确的类型，对于数组和对象都会显示<code>object</code>，对于函数会显示<code>function</code>。对于<code>null</code>返回<code>object</code>(这个可以是以前遗留的bug，现在的解释是<code>null</code>被认为<code>object</code>对象的一个占位符，从而解释了这一个矛盾)</li><li><code>instanceof</code>主要是用来判断引用类型，它的原理是根据原型链来查找。一般用于判断对象是否是某个类或者子类的实例。</li></ul><h3 id="有没有更好的判断变量类型的方法" tabindex="-1"><a class="header-anchor" href="#有没有更好的判断变量类型的方法" aria-hidden="true">#</a> 有没有更好的判断变量类型的方法？</h3><ul><li>可以使用<code>Object.prototype.toString.call(var)</code>，可以更加准确的判断某个变量的类型。</li></ul><h3 id="类数组转为数组的方式有哪些" tabindex="-1"><a class="header-anchor" href="#类数组转为数组的方式有哪些" aria-hidden="true">#</a> 类数组转为数组的方式有哪些？</h3><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span>
</code></pre><h3 id="如何判断一个变量是否是数组" tabindex="-1"><a class="header-anchor" href="#如何判断一个变量是否是数组" aria-hidden="true">#</a> 如何判断一个变量是否是数组？</h3><pre class="language-javascript"><code><span class="token comment">// 通过Array.isArray()方法, 此方法放回boolean</span>
Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>

<span class="token comment">// 通过原型是不是一样判断</span>
arr<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype

<span class="token comment">// 通过instanceof判断，是否是Array的实例</span>
arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span>

<span class="token comment">// 通过判断构造函数是否是指向Array</span>
arr<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Array

<span class="token comment">// 使用Object.prototype.toString.call()</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object Array]&#39;</span>
</code></pre><h3 id="将多维数组扁平化" tabindex="-1"><a class="header-anchor" href="#将多维数组扁平化" aria-hidden="true">#</a> 将多维数组扁平化？</h3><pre class="language-javascript"><code><span class="token comment">// 第一种用原生的方法</span>
<span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 第二种使用递归的方法</span>
<span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> item <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token operator">...</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="数组去重" tabindex="-1"><a class="header-anchor" href="#数组去重" aria-hidden="true">#</a> 数组去重？</h3><pre class="language-javascript"><code><span class="token comment">// 第一种使用set特性，自身具备去重的效果</span>
<span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 第二种，循环每个值，看是否存在数组中，去掉重复的</span>
<span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> i<span class="token punctuation">,</span> a</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">===</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 第三种使用map唯一的特性</span>
<span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">!</span>tmp<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> tmp<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="字符串的test、match、search它们之间的区别" tabindex="-1"><a class="header-anchor" href="#字符串的test、match、search它们之间的区别" aria-hidden="true">#</a> 字符串的<code>test</code>、<code>match</code>、<code>search</code>它们之间的区别？</h3><pre class="language-javascript"><code><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">test</span><span class="token template-punctuation string">\`</span></span> 是检测字符串是否匹配某个正则，返回布尔值；
<span class="token operator">/</span><span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>

<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">match</span><span class="token template-punctuation string">\`</span></span> 是返回检测字符匹配正则的数组结果集合，没有返回<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">null</span><span class="token template-punctuation string">\`</span></span>；
<span class="token string">&#39;1AbC2d&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [&#39;A&#39;, &#39;b&#39;, &#39;C&#39;, &#39;d&#39;]</span>

<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">search</span><span class="token template-punctuation string">\`</span></span> 是返回正则匹配到的下标，没有返回<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">-1</span><span class="token template-punctuation string">\`</span></span>。
<span class="token string">&#39;1AbC2d&#39;</span><span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2</span>
</code></pre><h3 id="字符串的slice、substring、substr它们之间的区别" tabindex="-1"><a class="header-anchor" href="#字符串的slice、substring、substr它们之间的区别" aria-hidden="true">#</a> 字符串的<code>slice</code>、<code>substring</code>、<code>substr</code>它们之间的区别？</h3><pre class="language-javascript"><code><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">slice</span><span class="token template-punctuation string">\`</span></span>是返回字符串开始至结束下标减去开始下标个数的新字符串，下标是负数为倒数；
<span class="token string">&#39;abcdefg&#39;</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c  // 3 - 2</span>
<span class="token string">&#39;abcdefg&#39;</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#39;&#39;  // 2 - 3</span>
<span class="token string">&#39;abcdefg&#39;</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// f  // -1 - -2</span>

<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">substring</span><span class="token template-punctuation string">\`</span></span>和<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">slice</span><span class="token template-punctuation string">\`</span></span>正常截取字符串时相同，负数为<span class="token number">0</span>，且下标值小的为开始下标；
<span class="token string">&#39;abcdefg&#39;</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//c  // 3 - 2</span>
<span class="token string">&#39;abcdefg&#39;</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c  // 3 - 2 </span>
<span class="token string">&#39;abcdefg&#39;</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// abc  // 3 - 0</span>

<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">substr</span><span class="token template-punctuation string">\`</span></span><span class="token function">返回开始下标开始加第二个参数</span><span class="token punctuation">(</span>不能为负数<span class="token punctuation">)</span>个数的新字符串。
<span class="token string">&#39;abcdefg&#39;</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// cde</span>
<span class="token string">&#39;abcdefg&#39;</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// de</span>
<span class="token string">&#39;abcdefg&#39;</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ef</span>
</code></pre><h3 id="number-123-和new-number-123-有什么区别" tabindex="-1"><a class="header-anchor" href="#number-123-和new-number-123-有什么区别" aria-hidden="true">#</a> <code>Number(&#39;123&#39;)</code>和<code>new Number(&#39;123&#39;)</code>有什么区别？</h3><ul><li><code>Number(&#39;123&#39;)</code>是一个转换函数，会尝试把参数转为整数类型；而<code>new Number(&#39;123&#39;)</code>则不同，这是一个构造函数，它的结果是实例化出来一个对象。</li><li>同样的情况也适用用<code>String</code>和<code>new String</code>；<code>Boolean</code>和<code>new Boolean</code>的情况。</li></ul><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span> <span class="token comment">// number</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span> <span class="token comment">// object</span>
</code></pre><h3 id="和-的区别" tabindex="-1"><a class="header-anchor" href="#和-的区别" aria-hidden="true">#</a> <code>==</code>和<code>===</code>的区别？</h3><ul><li><code>===</code>会判断两边变量的类型和值是否全部相等，<code>==</code>会存在变量类型转换的问题，所以并不推荐使用，只用一种情况会被使用，<code>var == null</code>是<code>var === undefined || var === null</code>的简写，其余情况一律使用<code>===</code>。</li></ul><h3 id="是否-就完全靠谱" tabindex="-1"><a class="header-anchor" href="#是否-就完全靠谱" aria-hidden="true">#</a> 是否<code>===</code>就完全靠谱？</h3><ul><li>也是不一定的，例如<code>0 === -0</code>就为<code>true</code>，<code>NaN === NaN</code>为<code>false</code>，判断两个变量是否完全相等可以使用<code>ES6</code>新增的<code>API</code>，<code>Object.is(0, -0)</code>，<code>Object.is(NaN, NaN)</code>就可以准确区分。</li></ul><h3 id="在类型转换中哪些值会被转为true" tabindex="-1"><a class="header-anchor" href="#在类型转换中哪些值会被转为true" aria-hidden="true">#</a> 在类型转换中哪些值会被转为<code>true</code>？</h3><ul><li>除了<code>undefined</code>、<code>null</code>、<code>false</code>、<code>NaN</code>、<code>&#39;&#39;</code>、<code>0</code>、<code>-0</code>以外的值都会被转为<code>true</code>，包括所有引用类型，即使是空的。</li></ul><h3 id="什么是基本包装类型" tabindex="-1"><a class="header-anchor" href="#什么是基本包装类型" aria-hidden="true">#</a> 什么是基本包装类型？</h3><ul><li>基本类型并不是对象，是不应该有各自方法的，为什么能调用各自的那些方法，是因为在后台对基本类型进行了包装。例如字符串、整数、布尔值，首先会使用各自的构造函数创建对应的实例，这样调用这些方法时就可以正常使用，不过再方法调用结束后，就会将实例给销毁掉，从而又是基本类型。</li></ul><pre class="language-javascript"><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
↓ 后台包装
<span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 包装</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 可以调用方法</span>
s1 <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 销毁</span>
</code></pre><h3 id="tostring-和valueof的区别" tabindex="-1"><a class="header-anchor" href="#tostring-和valueof的区别" aria-hidden="true">#</a> <code>toString()</code>和<code>valueOf</code>的区别？</h3><ul><li><code>null</code>和<code>undefined</code>没有以上两个方法。</li><li><code>toString</code>：值类型时返回自身的字符串形式；当是引用类型时，无论是一维或多维数组，将他们拍平成一个字符串，里面的<code>null</code>和<code>undefined</code>转为空字符串<code>&#39;&#39;</code>，对象转为<code>[object Object]</code>，函数的原样返回字符串形式。</li><li><code>valueOf</code>无论是值类型还是引用类型，大部分情况下都是原样返回，当是<code>Date</code>类型时，返回时间戳。</li><li>在进行字符串强转的时候，<code>toString</code>会优先于<code>valueOf</code>；在进行数值运算时，<code>valueOf</code>会优先于<code>toString</code>。</li><li>当执行<code>toString</code>的变量是一个整数类型时，支持传参，表示需要转为多少进制的字符串。</li></ul><h3 id="谈谈对this的理解" tabindex="-1"><a class="header-anchor" href="#谈谈对this的理解" aria-hidden="true">#</a> 谈谈对<code>this</code>的理解？</h3><ul><li><code>this</code>表示为当前的函数调用方，在运行时才能决定。如谁调用了某个方法，谁就是这个方法执行时的<code>this</code>。</li></ul><p>有几个特殊情况：</p><ol><li>箭头函数，在创建的时候就确定了他的this指向，指向外层的this</li><li>当使用 new 关键字调用函数时，函数中的 this 一定是 JS 创建的新对象</li><li>可以使用bind、call、apply来修改函数的this指向，但是不能修改箭头函数的指向</li><li>在全局作用域下使用this调用调用函数，这时this指向全局作用域</li></ol><h3 id="改变当前调用this的方式" tabindex="-1"><a class="header-anchor" href="#改变当前调用this的方式" aria-hidden="true">#</a> 改变当前调用<code>this</code>的方式？</h3><ul><li><code>call</code>：会立即执行调用<code>call</code>方法的函数，不过是以第一个参数为<code>this</code>的情况下调用，方法内可以传递不等的参数，作为调用<code>call</code>方法的参数。</li><li><code>apply</code>：运行方式和<code>call</code>是一致的，只是接受的参数不同，不能是不定参数，得是一个数组。</li><li><code>bind</code>：会改变当前的<code>this</code>，接受不定参数，不过不会马上执行调用<code>bind</code>方法的函数，而是返回一个函数作为结果，执行后才是调用函数的结果。</li></ul><h3 id="谈谈对闭包的理解" tabindex="-1"><a class="header-anchor" href="#谈谈对闭包的理解" aria-hidden="true">#</a> 谈谈对闭包的理解？</h3><ul><li>在 JavaScript 中，根据词法作用域的规则，内部函数总是可以访问其外部函数中声明的变量，当通过调用一个外部函数返回一个内部函数后，即使该外部函数已经执行结束了，但是内部函数引用外部函数的变量依然保存在内存中，我们就把这些变量的集合称为闭包。</li></ul><h3 id="谈谈对原型以及原型链的理解" tabindex="-1"><a class="header-anchor" href="#谈谈对原型以及原型链的理解" aria-hidden="true">#</a> 谈谈对原型以及原型链的理解？</h3><ul><li>每一个<code>JavaScript</code>引用类型(数组/对象/函数)都有一个<code>__proto__</code>属性，这个属性是一个对象格式，也就是原型属性。在原型属性里面有一个<code>constructor</code>属性，这个属性是这个引用类型的构造函数，在<code>constructor</code>里面又有一个<code>prototype</code>的属性，这个属性又指回了引用类型的原型属性。</li><li>原型链就是通过对象的<code>__proto__</code>属性层层连接起来形成的，而构造函数的<code>prototype</code>是一个对象属性，再构造函数实例化时就会将这个属性赋值给实例化后对象的<code>__proto__</code>属性，所以函数的继承也会相应的构造出对象的原型链。</li></ul><h3 id="原型继承的方式有哪些" tabindex="-1"><a class="header-anchor" href="#原型继承的方式有哪些" aria-hidden="true">#</a> 原型继承的方式有哪些？</h3><ul><li>原型链继承、借用构造函数继承、组合继承、原型式继承、寄生组合继承等等。最优化的继承方式是寄生组合继承：</li></ul><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Child</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Child
</code></pre><h3 id="什么是垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#什么是垃圾回收机制" aria-hidden="true">#</a> 什么是垃圾回收机制？</h3><ul><li>在程序执行的过程中，解释器会为创建出来的变量分配内存来存储这些变量的实体，执行环境会负责管理代码执行过程中使用到的内存，而何时划出新的内存以及何时把占用的内存释放出来的这样一套内存自动管理机制就是垃圾回收机制。这种周期性的回收策略主要有两种。</li><li>标记清除：当变量进入环境时，就将这个变量标记为&#39;进入环境&#39;，而当这个变量离开环境时，则将其标记为&#39;离开环境&#39;。垃圾收集器会给内存中的每个变量都做上标记，然后它会去掉环境中的变量以及被环境中变量引用的变量的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，最后垃圾收集器完成内存清除工作。</li><li>引用计数：追踪记录每个值被引用的次数，当声明了一个变量并将一个引用类型赋给该变量时，这个变量的引用次数就是1。相反如果包含这个值引用的变量又取得了另外一个值，则这个值的引用次数减1。当为0时，这说明没有办法再访问这个值了，因此垃圾收集器下次运行时，就会释放该值占用的内存。</li></ul><h3 id="如何解决引用类型变量共享的问题" tabindex="-1"><a class="header-anchor" href="#如何解决引用类型变量共享的问题" aria-hidden="true">#</a> 如何解决引用类型变量共享的问题？</h3><ul><li>可以对引用类型进行深拷贝解决，最简单暴力的深拷贝是<code>JSON.parse(JSON.stringify(obj))</code>，不过也会存在诸多问题，更加完善的深拷贝需要手写递归方法对不同参数分别处理</li></ul><h3 id="函数防抖和节流的区别" tabindex="-1"><a class="header-anchor" href="#函数防抖和节流的区别" aria-hidden="true">#</a> 函数防抖和节流的区别？</h3><ul><li>函数防抖指一定时间内没有再次触发函数，就执行该函数，否则重新计时；节流是规定某个时间内只能执行一次函数。以<code>wow</code>为例：</li><li>函数防抖：<code>2.5s</code>施法的寒冰箭，再读条的过程中，你身子抖动打断了施法，再次触发技能时麻烦您重新读条。</li><li>函数节流：火冲为瞬发技能，不过你规定<code>cd</code>为<code>8s</code>，所以即使<code>8s</code>内按了<code>10</code>次，也只能来<code>1</code>发，节省点体力吧。</li></ul><h3 id="var、let、const的区别" tabindex="-1"><a class="header-anchor" href="#var、let、const的区别" aria-hidden="true">#</a> <code>var</code>、<code>let</code>、<code>const</code>的区别 ？</h3><ul><li><code>var</code>类型会有变量提升的情况，也就是说声明会首先提升到当前作用域的顶端，在使用到时再读取定义的值。</li><li>在全局作用域下定义的<code>var</code>变量会挂载到作用域链的顶端<code>window</code>下，而<code>let</code>和<code>const</code>全局定义时在作用域链中要低一级。</li><li><code>let</code>和<code>const</code>没有变量提升的情况，必须要先声明再使用，否则就会出现暂时性死区的情况。</li><li>而且它们的作用域存在最近的大括号之内，也就是块级作用域，并且一经定义后，同一个作用域内不能再次定义。</li><li>而<code>const</code>和<code>let</code>的区别在于一经定义后不得再次改变<code>const</code>定义的值，如果是引用类型只要不改变指针，改变里面的值是没问题的。</li><li><code>const</code>定义时必须赋值，<code>let</code>不必。</li></ul><h3 id="set、weakset的区别" tabindex="-1"><a class="header-anchor" href="#set、weakset的区别" aria-hidden="true">#</a> <code>Set</code>、<code>WeakSet</code>的区别？</h3><ul><li><code>Set</code>类型内存储的是不会重复的值，建议存储基础类型的值，因为引用类型的指针都不同。</li><li><code>WeakSet</code>只能存储对象参数，否则会报错，而且是存储的引用类型的弱引用。</li><li><code>WeakSet</code>不可被迭代，不支持<code>forEach</code>、<code>for-of</code>、<code>keys</code>、<code>values</code>方法，没有<code>size</code>属性。</li></ul><pre class="language-ini"><code><span class="token key attr-name">const set</span> <span class="token punctuation">=</span> <span class="token value attr-value">new Set();</span>
<span class="token key attr-name">const obj</span> <span class="token punctuation">=</span> <span class="token value attr-value">{name: &#39;cc&#39;};</span>
set.add(obj);
<span class="token key attr-name">obj</span> <span class="token punctuation">=</span> <span class="token value attr-value">null;</span>
<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">...set</span><span class="token punctuation">]</span></span><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">0</span><span class="token punctuation">]</span></span>; // {name: &#39;cc&#39;} 转数组后依然可以访问到

<span class="token key attr-name">const weakSet</span> <span class="token punctuation">=</span> <span class="token value attr-value">new WeakSet();</span>
<span class="token key attr-name">const obj</span> <span class="token punctuation">=</span> <span class="token value attr-value">{};</span>
weakSet.add(obj);
<span class="token key attr-name">obj</span> <span class="token punctuation">=</span> <span class="token value attr-value">null;  // 会移除引用</span>
weakSet.has(obj); // false
</code></pre><h3 id="map、weakmap的区别" tabindex="-1"><a class="header-anchor" href="#map、weakmap的区别" aria-hidden="true">#</a> <code>Map</code>、<code>WeakMap</code>的区别？</h3><ul><li><code>Map</code>是解决了对象<code>key</code>会被自动转为字符串的一种增强<code>key/value</code>集合。</li><li><code>WeakMap</code>是弱引用的<code>Map</code>集合，<code>key</code>必须是非<code>null</code>的对象格式，同样不可以被迭代。</li></ul><pre class="language-dart"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;cc&#39;</span></span><span class="token punctuation">;</span>
obj<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;1&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// cc</span>

<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;cc&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;1&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false   1 和 &#39;1&#39;不会被转换</span>
</code></pre><h3 id="箭头函数和普通函数的区别" tabindex="-1"><a class="header-anchor" href="#箭头函数和普通函数的区别" aria-hidden="true">#</a> 箭头函数和普通函数的区别？</h3><ul><li>箭头函数的<code>this</code>是由包裹它的普通函数的<code>this</code>来决定；</li><li>不能作为构造函数, <code>Generator</code>函数；</li><li>参数不能使用<code>arguments</code>访问，需要使用<code>Es6</code>的不定参数访问；</li><li>使用<code>bind</code>方法无效。</li></ul><h3 id="请实现plus-1-2-3-4-等于10" tabindex="-1"><a class="header-anchor" href="#请实现plus-1-2-3-4-等于10" aria-hidden="true">#</a> 请实现plus(1)(2)(3)(4)等于10？</h3><pre class="language-javascript"><code><span class="token comment">// 方法1：</span>
<span class="token keyword">function</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> sum <span class="token operator">=</span> n<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">_plus</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sum <span class="token operator">+=</span> n<span class="token punctuation">;</span>
    <span class="token keyword">return</span> _plus<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  _plus<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> _plus<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方法2：</span>
<span class="token keyword">function</span> <span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> newArgs <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">multi</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  fn<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> fn<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="谈谈对class的理解" tabindex="-1"><a class="header-anchor" href="#谈谈对class的理解" aria-hidden="true">#</a> 谈谈对<code>class</code>的理解 ？</h3><ul><li><code>JavaScript</code>没有真正的类，一直也是通过函数加原型的形式来模拟，<code>class</code>也不例外，只是语法糖，本质还是函数。需要先声明再使用，内部的方法不会被遍历，且没有函数的<code>prototype</code>属性。不过相较<code>ES6</code>之前无论是定义还是继承都好理解了很多。继承主要是使用<code>extends</code>和<code>super</code>关键字，本质类似于<code>ES5</code>的寄生组合继承：</li></ul><pre class="language-scala"><code><span class="token keyword">class</span> Parent <span class="token punctuation">{</span>
  constructor<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> Child <span class="token keyword">extends</span> Parent <span class="token punctuation">{</span>
  constructor<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 相当于Parent.call(this, name)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre><h3 id="谈谈对promise的理解" tabindex="-1"><a class="header-anchor" href="#谈谈对promise的理解" aria-hidden="true">#</a> 谈谈对<code>Promise</code>的理解 ？</h3><ul><li><code>Promise</code>主要解决的问题就是异步回调嵌套过深造成代码难以维护和理解。</li><li><code>Promise</code>构造函数内的代码是同步执行的，而之后<code>then</code>或<code>catch</code>方法是异步执行的，构造函数接受两个函数参数<code>resolve</code>和<code>reject</code>，它们执行时接受的参数分别会传递给<code>then</code>和<code>catch</code>表示成功的回调以及失败回调接受到的值。</li><li><code>Promise</code>一共有三种状态<code>pending</code>等待状态、<code>resolved</code>已完成状态、<code>rejected</code>已拒绝状态，状态的改变只能由等待转为已完成或等待转为已拒绝状态，而且状态的改变只会发生一次。</li><li>必须要实现<code>then</code>方法且方法里必须要返回一个<code>Promise</code>对象，如果是返回其他的类型会尝试包装成<code>Promise</code>对象；</li><li><code>then</code>可以被链式的调用。</li><li>缺点是<code>Promise</code>链中途无法取消；错误需要通过回调函数捕获。</li></ul><h3 id="谈谈对es-module的理解" tabindex="-1"><a class="header-anchor" href="#谈谈对es-module的理解" aria-hidden="true">#</a> 谈谈对<code>ES-Module</code>的理解 ？</h3><ul><li><code>ES-Module</code>是<code>ES6</code>原生支持模块化方案，通过<code>import</code>来引入模块，通过<code>export default</code>或<code>export</code>来导出模块。</li></ul><h3 id="谈谈对proxy的理解" tabindex="-1"><a class="header-anchor" href="#谈谈对proxy的理解" aria-hidden="true">#</a> 谈谈对<code>Proxy</code>的理解 ？</h3><ul><li>和<code>Object.defineProperty</code>有些类似，它的作用是用来自定义对象中操作。<code>Proxy</code>的构造函数接受两个参数，第一个参数是需要代理的对象，第二个参数是一个对象，里面会定义<code>get</code>和<code>set</code>方法，当代理对象中的某个值被访问或重新赋值就会触发相应的<code>get</code>和<code>set</code>方法。<code>vue3.0</code>就抛弃了<code>Object.defineProperty</code>而拥抱了<code>Proxy</code>，它的优点是只需要代理一次，对象内的值发生了改变就会被感知到，不再需要像以前为对象的每个值进行数据劫持；而且以前对象的新增，数组的下标设置<code>0</code>清空等情况都可以被感知到，在响应式里也不在需要为数组和对象收集两次依赖，相信会大大提升性能。</li></ul><h3 id="谈谈对generator的理解" tabindex="-1"><a class="header-anchor" href="#谈谈对generator的理解" aria-hidden="true">#</a> 谈谈对<code>Generator</code>的理解？</h3><ul><li>是<code>JavaScript</code>方便创建迭代器的新语法，在方法名前面添加<code>*</code>号，表示这个方法是一个生成器函数，在函数内部配合<code>yield</code>关键字指定<code>next()</code>方法返回值及顺序。</li><li><code>yield</code>类似与在函数内部打上了断点，<code>yield</code>就是每一处的<code>debugger</code>，执行<code>next()</code>方法后进入下一个断点。</li><li>不能使用箭头函数来创建生成器。</li></ul><h3 id="谈谈对async及await的理解" tabindex="-1"><a class="header-anchor" href="#谈谈对async及await的理解" aria-hidden="true">#</a> 谈谈对<code>async</code>及<code>await</code>的理解 ？</h3><ul><li>是<code>Genneator</code>的语法糖形式，解决的问题是以同步的形式写异步代码，让代码流程能很好的表示执行流程。在函数的前面加上<code>async</code>表明是一个异步函数，函数的内部需要配合<code>await</code>关键字使用，每一个<code>await</code>关键字相当于是<code>yield</code>，会暂停函数的执行，直到异步函数执行完毕后内部会自动执行<code>next()</code>方法，执行之后的代码，函数的返回结果是一个<code>Promise</code>对象。因为是以同步的形式书写异步代码，所以错误捕获是使用<code>try/catch</code>的形式。</li></ul><h3 id="谈谈对event-loop的理解" tabindex="-1"><a class="header-anchor" href="#谈谈对event-loop的理解" aria-hidden="true">#</a> 谈谈对<code>Event-Loop</code>的理解 ？</h3><ul><li><code>JavaScript</code>的执行机制简单来说就先执行同步代码，然后执行异步代码，而异步的代码里面又分为宏任务代码和微任务代码，先执行微任务，然后执行宏任务。首先会将所有<code>JavaScript</code>作为一个宏任务执行，遇到同步的代码就执行，然后开始分配任务，遇到宏任务就将它的回调分配到宏任务的队列里，遇到微任务的回调就分配到微任务的队列里，然后开始执行所有的微任务。执行微任务的过程还是遵循先同步然后分配异步任务的顺序，微任务执行完毕之后，一次<code>Event-Loop</code>的<code>Tick</code>就算完成了。接着挨个去执行分配好的宏任务，在每个宏任务里又先同步后分配异步任务，完成下一次<code>Tick</code>，循环往复直到所有的任务全部执行完成。</li><li>微任务包括：<code>process.nextTick</code> ，<code>promise</code> ，<code>MutationObserver</code>。</li><li>宏任务包括：<code>script</code> ， <code>setTimeout</code> ，<code>setInterval</code> ，<code>setImmediate</code> ，<code>I/O</code> ，<code>UI rendering</code>。</li></ul><h3 id="对浏览器或元素的各种距离参数你知道哪些" tabindex="-1"><a class="header-anchor" href="#对浏览器或元素的各种距离参数你知道哪些" aria-hidden="true">#</a> 对浏览器或元素的各种距离参数你知道哪些？</h3><ul><li><code>document.documentElement.clientHeight</code>：当前窗口内容区 + 内边距的高度</li><li><code>window.innerHeight</code>: 当前窗口内容区 + 内边距 + 边框 + 滚动条高度</li><li><code>window.outerHeight</code>：整个浏览器的高度(包括工具栏)</li><li></li><li><code>clientHeight</code>: 当前元素内容区 + 内边距的高度</li><li><code>clientTop</code>: 当前元素上边框的宽度</li><li><code>offsetHeight</code>: 当前元素内容区 + 内边距 + 边框 + 滚动条的高度</li><li><code>offsetTop</code>: 当前元素的边框距离父元素上外边距的距离</li><li><code>scrollHeight</code>: 当前内部可以滚动区域的高度，如果不能滚动则为自己内容区 + 内边距的高度</li><li><code>scrollTop</code>: 当前元素滚动离顶部的距离</li></ul><h3 id="怎么确定当前浏览器的类型" tabindex="-1"><a class="header-anchor" href="#怎么确定当前浏览器的类型" aria-hidden="true">#</a> 怎么确定当前浏览器的类型？</h3><ul><li>通过<code>navigator.userAgent</code>获取浏览器信息，根据里面的关键字来确定。</li></ul><h3 id="什么是简单请求和复杂请求" tabindex="-1"><a class="header-anchor" href="#什么是简单请求和复杂请求" aria-hidden="true">#</a> 什么是简单请求和复杂请求？</h3><ul><li>简单请求：</li></ul><ol><li>请求方法仅限<code>get</code>、<code>head</code>、<code>post</code>。</li><li><code>Content-type</code>仅限<code>text/plain</code>、<code>multipart/form-data</code>、<code>application/x-www-form-urlencoded</code>。</li></ol><ul><li>复杂请求： 不符合以上条件者就为复杂请求，首先会发起一个<code>option</code>方法的预检请求，来知道服务端是否允许跨域请求。 有一个坑就是服务端设置了<code>CORS</code>，但当客户端发其复杂请求时会验证<code>Authorization</code>字段，但是客户端并没有，所以需要将<code>option</code>方法过滤掉。</li></ul><h3 id="从输入域名到页面显示都经历了什么" tabindex="-1"><a class="header-anchor" href="#从输入域名到页面显示都经历了什么" aria-hidden="true">#</a> 从输入域名到页面显示都经历了什么？</h3><ul><li>首先将域名<code>DNS</code>解析为对应的<code>IP</code>地址，然后通过<code>Socket</code>发送数据，经过<code>tcp</code>协议的三次握手，向该地址发起<code>HTTP</code>请求，服务器处理，浏览器收到<code>HTTP</code>响应的数据，关闭<code>tcp</code>连接，开始渲染。</li></ul><h3 id="谈谈浏览器的渲染机制" tabindex="-1"><a class="header-anchor" href="#谈谈浏览器的渲染机制" aria-hidden="true">#</a> 谈谈浏览器的渲染机制？</h3><ul><li>书写的<code>JavaScript</code>、<code>Css</code>、<code>Html</code>在网络传输中都是<code>0</code>和<code>1</code>的字节流，所以浏览器首先会把接受到的这些字节流转为字符串。然后首先将<code>html</code>字节流解析为字符串，对字符串进行标记化，确定标签名以及里面的内容，然后生成对应的<code>node</code>节点，根据节点的结构关系生成<code>DOM</code>树。然后开始解析<code>css</code>，和解析<code>html</code>类似，<code>css</code>一般有嵌套或继承的情况，浏览器会从里到外的递归来确定每个节点的样式是什么，从而生成一颗<code>CSSOM</code>树。最后是将这两颗树结合起来生成一颗渲染树，浏览器根据渲染树进行布局，调用<code>GPU</code>绘制生成页面显示在屏幕上。</li></ul><h3 id="什么是重绘和回流" tabindex="-1"><a class="header-anchor" href="#什么是重绘和回流" aria-hidden="true">#</a> 什么是重绘和回流？</h3><ul><li>重绘是节点的外观发生改变而不改变布局时，如改变了<code>color</code>这个行为；回流是指改变布局或几何属性发生改变时引起的行为，如添加移除<code>Dom</code>，改变尺寸。它们频繁的触发会影响页面性能。</li><li>回流一定触发重绘，而重绘不一定引起回流。回流的成本比重绘高很多，而且子节点的回流，可能引起父节点一系列的回流。</li></ul><h3 id="如何减少重绘和回流" tabindex="-1"><a class="header-anchor" href="#如何减少重绘和回流" aria-hidden="true">#</a> 如何减少重绘和回流？</h3><ul><li>使用<code>transform</code>替代位移，使用<code>translate3d</code>开启<code>GPU</code>加速</li><li>尽量使用<code>visibility</code>替代<code>display:none</code></li><li>不要使用<code>tanle</code>布局</li><li>不要在循环里读取节点的属性值</li><li>动画速度越快，回流次数越少</li></ul><h3 id="什么是事件流-模型" tabindex="-1"><a class="header-anchor" href="#什么是事件流-模型" aria-hidden="true">#</a> 什么是事件流/模型？</h3><ul><li>当某一个事件被触发时，分为三个阶段：</li><li>1.事件通过捕获从<code>window</code> =&gt; <code>document</code> =&gt; <code>body</code> =&gt; 目标元素</li><li>2.事件到达注册的目标上</li><li>3.目标元素通过冒泡返回到<code>window</code>，沿途触发相同类型的事件</li></ul><h3 id="什么是事件代理" tabindex="-1"><a class="header-anchor" href="#什么是事件代理" aria-hidden="true">#</a> 什么是事件代理？</h3><ul><li>利用事件流的冒泡特性，将子节点的事件绑定在父节点上，然后在回调里面使用事件对象进行区分，优点是节省内存且不需要给子节点销毁事件。</li></ul><h3 id="什么是事件对象" tabindex="-1"><a class="header-anchor" href="#什么是事件对象" aria-hidden="true">#</a> 什么是事件对象？</h3><ul><li>这个对象里面存放着触发事件的状态，如触发事件的当前元素，键盘事件是哪个按键触发的，滚动事件的位置等等。</li></ul>`,105),c=[o];function p(l,i){return a(),s("div",null,c)}const d=n(t,[["render",p],["__file","js-01.html.vue"]]);export{d as default};
