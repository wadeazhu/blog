import{_ as e,p as a,q as o,a1 as s}from"./framework-34d4cddf.js";const t={},r=s('<h2 id="说说几种前端储存以及它们之间的区别" tabindex="-1"><a class="header-anchor" href="#说说几种前端储存以及它们之间的区别" aria-hidden="true">#</a> 说说几种前端储存以及它们之间的区别</h2><details class="custom-container details"><summary>简答</summary><p>cookie: html5之前本地储存的主要方式，大小只有4k，http请求头会自动带上cookie，兼用性好。</p><p>localStorage： html5新特性，持久性存储，即使页面关闭也不会清除，以键值对的方式储存，大小为5M。</p><p>sessionStorage: html5新特性，操作及大小同localStorage，和localStorage的区别在于sessionStorage在选项卡（页面）被关闭时清除，且不同选项卡之间你的sessionStorage不互通。</p><p>IndexedDB：NoSQL型数据库，类比MongoDB，使用键值对进行存储，异步操作数据库，支持事务，储存空间可以在250MB以上，但是IndexedDB受同源策略限制。</p><p>Web SQL：是在浏览器上模拟的关系型数据库，开发者可以通过SQL语句来操作Web SQL，是HTML5以外一套独立的规范，兼容性差。</p></details><h3 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie" aria-hidden="true">#</a> cookie</h3><p>html5之前本地储存的主要方式，大小只有4k，http请求头会自动带上cookie，兼用性好。</p><h3 id="localstorage" tabindex="-1"><a class="header-anchor" href="#localstorage" aria-hidden="true">#</a> localStorage</h3><p>html5新特性，持久性存储，即使页面关闭也不会清除，以键值对的方式储存，大小为5M。</p><h3 id="sessionstorage" tabindex="-1"><a class="header-anchor" href="#sessionstorage" aria-hidden="true">#</a> sessionStorage</h3><p>sessionStorage: html5新特性，操作及大小同localStorage，和localStorage的区别在于sessionStorage在选项卡（页面）被关闭时清除，且不同选项卡之间你的sessionStorage不互通。</p><h3 id="indexeddb" tabindex="-1"><a class="header-anchor" href="#indexeddb" aria-hidden="true">#</a> IndexedDB</h3><p>NoSQL型数据库，类比MongoDB，使用键值对进行存储，异步操作数据库，支持事务，储存空间可以在250MB以上，但是IndexedDB受同源策略限制。</p><h3 id="web-sql" tabindex="-1"><a class="header-anchor" href="#web-sql" aria-hidden="true">#</a> Web SQL</h3><p>是在浏览器上模拟的关系型数据库，开发者可以通过SQL语句来操作Web SQL，是HTML5以外一套独立的规范，兼容性差。</p>',12),d=[r];function i(n,h){return a(),o("div",null,d)}const l=e(t,[["render",i],["__file","0003.说说几种前端储存以及它们之间的区别.html.vue"]]);export{l as default};
