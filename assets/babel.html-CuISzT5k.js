import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,b as e}from"./app-D1MQ9M-Q.js";const l={},p=e(`<h1 id="babel" tabindex="-1"><a class="header-anchor" href="#babel"><span>babel</span></a></h1><p>babel用于转译es的语法, 当项目中存在比较高的语法, 且在终端访问不了的时候, 就会用到babel, babel已经是项目构件中比较重要的一个部分. babel只是创建了一个平台, 用于将语法解析成抽象语法树, 然后用插件对抽象语法树进行变换操作, 最后babel-generator生成对应的代码.</p><p>babel包的组成:</p><ul><li>@babel/core: babel的核心包</li><li>@babel/cli: babel提供命令行工具的包</li><li>@babel/preset-*: 用于不用的场景下的插件集合, 比如: @babel/preset-env, @babel/preset-typescript...</li><li>@babel/plugin-*: 用于将代码转换的插件, 比如: @babel/plugin-</li></ul><h2 id="可以解决的问题" tabindex="-1"><a class="header-anchor" href="#可以解决的问题"><span>可以解决的问题</span></a></h2><ol><li>如何转换js语法层面的代码</li><li>如何转换js新增api的代码</li><li>如何按需插入Polyfill</li><li>解决Polyfill重复注入的问题</li><li>如何按需插入Polyfill的同时可以保证不污染全局变量。</li></ol><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> i @babel/core @babel/cli --save-dev

<span class="token comment"># 对于webpack需要在安装babel-loader， 作为babel与webpack之间的桥梁</span>
<span class="token function">npm</span> i babel-loader
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><p>结合webpack使用</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//... </span>
<span class="token punctuation">{</span>
    <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_modules|bower_components))</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在这里什么都不写，那么这里babel并不会对js进行转换，只是对js进行了ast的变换，然后等待插件进行转换.</p><p>比如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> num1 <span class="token operator">+</span> num2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么这里需要两个插件， 分别用于转换const和箭头函数</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev @babel/plugin-transform-arrow-functions @babel/plugin-transform-block-scoping
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//... </span>
<span class="token punctuation">{</span>
    <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_modules|bower_components))</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token string">&#39;@babel/plugin-transform-arrow-functions&#39;</span><span class="token punctuation">,</span>
                <span class="token string">&#39;@babel/plugin-transform-block-scoping&#39;</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里就会出现第一个问题，当es6代码用的很多的时候，就会插入很多的插件，所以babel官方提供了预设这一选项，开发者可以根据当前代码的环境自己选择合适的预设，这个预设包含了这个环境下的一系列的插件。比如： @babel/preset-env提供了es6转换的一些插件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> i @babel/preset-env --save-dev
<span class="token function">npm</span> i core-js@3 <span class="token parameter variable">--save</span> // 提供Polyfill
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_modules|bower_components))</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">[</span><span class="token string">&#39;@babel/preset-env&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                    <span class="token literal-property property">useBuiltIns</span><span class="token operator">:</span> <span class="token string">&#39;entry&#39;</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">corejs</span><span class="token operator">:</span> <span class="token string">&#39;3&#39;</span>
                <span class="token punctuation">}</span><span class="token punctuation">]</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong></p><ol><li><p>如果这里不添加属性， babel会默认目标环境版本很低去转换且只会转换js语法层面的代码，比如：箭头函数、const、await这些，但是新增的方法不会转换比如：Array.form()、Object.is()...， 转换这些要提供安装<code>@babel/polyfill</code>,然后在代码的入口文件导入<code>import @babel/polyfill</code></p></li><li><p>在全局入口中导入<code>@babel/polyfill</code>已经不推荐使用，出现两个问题，1、只是用一些基本的功能的情况下会导入所有的polyfill，导致最终打包结果很大，2、会污染全局变量。 然后把polyfill交给了预设或者插件来处理，可以智能化的管理这些polyfill</p></li><li><p>上面的配置是将polyfill交给了预设来管理，通过设置useBuiltIns来管理全部导入还是按需导入。 但是polyfill注入会出现重复导入的问题</p></li><li><p>corejs的版本区别：corejs2已经不推荐了， corejs3相比corejs2增加了一些实例方法比如&#39;foobar&#39;.includes(&#39;foo&#39;)中includes方法在2中是不存在的。</p></li></ol><p>针对上面的配置，没有解决了polyfill按需加载，但是没有解决全局变量污染的问题，babel官方提供了一个插件<code>@babel/plugin-transform-runtime</code>,让他来管理polyfill， @babel/preset-env只用来转换语法</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> i @babel/plugin-transform-runtime
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,24),t=[p];function i(o,r){return n(),a("div",null,t)}const u=s(l,[["render",i],["__file","babel.html.vue"]]),b=JSON.parse('{"path":"/jichu/gongju/babel.html","title":"babel","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"可以解决的问题","slug":"可以解决的问题","link":"#可以解决的问题","children":[]},{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[]}],"git":{"createdTime":1709263503000,"updatedTime":1709354699000,"contributors":[{"name":"zhuqi","email":"zhuqi","commits":4}]},"readingTime":{"minutes":2.97,"words":890},"filePathRelative":"jichu/gongju/babel.md","localizedDate":"2024年3月1日"}');export{u as comp,b as data};
