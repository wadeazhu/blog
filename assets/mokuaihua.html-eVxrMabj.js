import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as e}from"./app-D1MQ9M-Q.js";const t={},p=e(`<h2 id="模块" tabindex="-1"><a class="header-anchor" href="#模块"><span>模块</span></a></h2><p>模块可以把一个大的工程拆分成互相依赖的小文件，再用简单的方式拼接起来，在各大语言中都存在，就连<code>css</code>中都存在@import来导入<code>css</code>，但是在<code>es6</code>之前没有。所以社区定义了两种模块的规范，一种是<code>CommonJS</code>， 一种是<code>AMD</code>，前者用于服务端，后者用于浏览器端。后面再<code>es6</code>在语言层面实现了模块的功能，可以代替这两个规范。<code>ES6</code>的设计之初是用于静态解析模块，编译时就能确定依赖关系。所以这与<code>CommonJS</code>和<code>AMD</code>需要运行时解析完全不同。</p><p><code>CommonJS</code>加载的是整个模块，引入的是整个的对象，但是<code>ES6</code>模块引用的是对应属性或者方法，其他的不加载。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// -- CommonJS</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> join<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> relative <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span>

<span class="token comment">// 相当于</span>
<span class="token keyword">const</span> _path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> join <span class="token operator">=</span> _path<span class="token punctuation">.</span>join
<span class="token keyword">const</span> resolve <span class="token operator">=</span> _path<span class="token punctuation">.</span>resolve
<span class="token keyword">const</span> relative <span class="token operator">=</span> _path<span class="token punctuation">.</span>relative

<span class="token comment">// -- ES6 这里只引入了这几个方法，其他的没有加载</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> join<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> relative <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ES6</code>模块的另一个特点，模块依赖过程中值的引入是可以实时获取变化后的值</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// test1.js</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    str <span class="token operator">=</span> <span class="token string">&#39;world&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// test2.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> str <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;test1.js&#39;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>  <span class="token comment">// world</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ES6</code> 优点：</p><ol><li>静态加载，编译的时候就完成了模块的加载，相比于<code>CommonJS</code>来说效率更高</li><li>由于是静态加载，所以后面给静态分析有很好的扩展，比如类型检查、宏</li><li>不再需要<code>UMD</code>模块格式</li><li>以后浏览器的<code>api</code>可以用模块格式提供，而不需要全局变量和命名空间来完成</li></ol><h2 id="export" tabindex="-1"><a class="header-anchor" href="#export"><span>export</span></a></h2><p>用于将规定模块的对外接口，一个模块就是一个对立的空间，如果想从外面访问到内部属性或者方法， 就必须使用export命令。export命令后面跟一个声明的写法、或者一个大括号，里面是一组需要导出的变量或者方法。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 写法一：</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>

<span class="token comment">// 写法二： 推荐这种写法， 将需要导入的</span>
<span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">12</span>
<span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> num<span class="token punctuation">,</span> date <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>export导入的其他设置</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 重命名</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> str <span class="token keyword">as</span> str1 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>export可以出现在模块的任何位置，但只要是模块顶层就可以。如果是在块级作用域中就会报错</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span> str <span class="token operator">===</span><span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">export</span> <span class="token keyword">const</span> str2 <span class="token operator">=</span> <span class="token string">&#39;world&#39;</span> <span class="token comment">//这里会报错，因为违背了静态解析</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="import" tabindex="-1"><a class="header-anchor" href="#import"><span>import</span></a></h2><p>import可以导入export导出的内容。语法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;address&#39;</span>
<span class="token keyword">import</span> name <span class="token keyword">from</span> <span class="token string">&#39;address&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>name</code> 表示变量名， <code>address</code>表示模块名。有大括号表示export导出的，没有大括号表示<code>export default</code>导出的。后面的地址可以是绝对路径也可以是相对路径，<strong>如果只写了一个模块名，那么必须有配置文件，告诉 JavaScript 引擎该模块的位置</strong>。</p><p><strong>特点一：如果写了多个模块名，es6只会加载一次</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> join <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span>

<span class="token comment">// 等同于</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> join<span class="token punctuation">,</span> resolve <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> join <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> join <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span> <span class="token comment">// 这里只会加载一次</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特点二：es6是静态分析，变量和模块名不能使用表达式</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;get&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> str <span class="token operator">+</span> <span class="token string">&#39;Name&#39;</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;Person&#39;</span> <span class="token comment">// 这里会报错</span>

<span class="token keyword">const</span> moduleName <span class="token operator">=</span> <span class="token string">&#39;person&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> getName <span class="token punctuation">}</span> from moduleName <span class="token comment">// 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特点三：导出的变量名表示的是常量，不允许修改</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> str <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;test&#39;</span>
str <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span> <span class="token comment">// 这里会报错，导出的是常量，不允许修改</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 1、重命名</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> name <span class="token keyword">as</span> newName <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;person&#39;</span>

<span class="token comment">// 2、整体载入</span>
<span class="token comment">// person.js 文件</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// index.js 中使用</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> person <span class="token keyword">from</span> <span class="token string">&#39;person&#39;</span> <span class="token comment">// 这里的person是可以静态分析的，所以这里不允许运行时改变</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

person<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 不允许</span>
person<span class="token punctuation">.</span><span class="token function-variable function">getAge</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 不允许</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="整体导出" tabindex="-1"><a class="header-anchor" href="#整体导出"><span>整体导出</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// person.js 文件</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// index.js 中使用</span>
<span class="token keyword">import</span> allFn <span class="token keyword">from</span> <span class="token string">&#39;person&#39;</span>  <span class="token comment">// 这里的allFn可以任意命名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>export default</code> 后面不用跟声明式语法，因为<code>default</code>相当于一个变量，用于接受后面的值，所以下面写法不正确</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">33</span> <span class="token comment">// 报错</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token number">33</span> <span class="token comment">// 直接这么写就可以</span>
<span class="token comment">// 但是函数特殊</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// 这里的getName，没有作用</span>
<span class="token comment">// 使用</span>
<span class="token keyword">import</span> person <span class="token keyword">from</span> <span class="token string">&#39;person&#39;</span>  <span class="token comment">// 这里的person就表示上面的getName</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想要在一个文件同时引入<code>export default</code>和<code>expoert</code>导出的内容，可以这么写</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> _<span class="token punctuation">,</span> <span class="token punctuation">{</span> clone <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;lodash&#39;</span>

<span class="token comment">// 对应下面的写法, ladash.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="import和export的复合写法" tabindex="-1"><a class="header-anchor" href="#import和export的复合写法"><span>import和export的复合写法</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span> getName <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;person&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里的变量名，只是相当于一个转发的功能，并没有被导入到当前模块</p><h3 id="其他写法" tabindex="-1"><a class="header-anchor" href="#其他写法"><span>其他写法</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 导出默认</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;person&#39;</span>

<span class="token comment">// 改名</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> name <span class="token keyword">as</span> newName <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;person&#39;</span>

<span class="token comment">// 整体输出</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;person&#39;</span>  <span class="token comment">// 这里会忽略 export default 导出的</span>

<span class="token comment">// 具名改成默认</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> name <span class="token keyword">as</span> <span class="token keyword">default</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;person&#39;</span>

<span class="token comment">// 默认改具名</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> name <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;person&#39;</span>

<span class="token comment">// 整体输出并改名</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">as</span> person <span class="token keyword">from</span> <span class="token string">&#39;person&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="import-1" tabindex="-1"><a class="header-anchor" href="#import-1"><span>import()</span></a></h2><p>实现一个动态加载，括号里面的参数和import中后面的参数完全一致，唯一的区别是，import()与加载的模块之间没有进行静态连接，import()类似与Node.js中的<code>require()</code>方法。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// person.js</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// index.js</span>
<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;person&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>getName<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="import-meta" tabindex="-1"><a class="header-anchor" href="#import-meta"><span>import.meta</span></a></h2><p>暂未用到</p>`,42),o=[p];function c(l,i){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","mokuaihua.html.vue"]]),k=JSON.parse('{"path":"/jichu/JavaScript/mokuaihua.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"模块","slug":"模块","link":"#模块","children":[]},{"level":2,"title":"export","slug":"export","link":"#export","children":[]},{"level":2,"title":"import","slug":"import","link":"#import","children":[]},{"level":2,"title":"整体导出","slug":"整体导出","link":"#整体导出","children":[]},{"level":2,"title":"import和export的复合写法","slug":"import和export的复合写法","link":"#import和export的复合写法","children":[{"level":3,"title":"其他写法","slug":"其他写法","link":"#其他写法","children":[]}]},{"level":2,"title":"import()","slug":"import-1","link":"#import-1","children":[]},{"level":2,"title":"import.meta","slug":"import-meta","link":"#import-meta","children":[]}],"git":{"createdTime":1709263503000,"updatedTime":1709354699000,"contributors":[{"name":"zhuqi","email":"zhuqi","commits":4}]},"readingTime":{"minutes":4.49,"words":1347},"filePathRelative":"jichu/JavaScript/mokuaihua.md","localizedDate":"2024年3月1日"}');export{u as comp,k as data};
