import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-D1MQ9M-Q.js";const p={},e=t(`<h2 id="创建pinia" tabindex="-1"><a class="header-anchor" href="#创建pinia"><span>创建<code>Pinia</code></span></a></h2><ol><li>第一步 <code>createPinia()</code></li><li>将一些数据与本地存储关联，当储存的$store变化的时候，同时更新本地存储</li><li>导出创建的<code>Pinia</code>变量</li></ol><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>
<span class="token keyword">import</span> piniaStoragePluginCreator <span class="token keyword">from</span> <span class="token string">&#39;@/utils/piniaStoragePluginCreator&#39;</span>
<span class="token keyword">const</span> pinia <span class="token operator">=</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 这个插件是将数据与本地存储关联</span>
<span class="token keyword">const</span> piniaPlugin <span class="token operator">=</span> <span class="token function">piniaStoragePluginCreator</span><span class="token punctuation">(</span>
    <span class="token punctuation">[</span><span class="token string">&#39;userInfoStore&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;menuStore&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;premissionStore&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tokenStore&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&#39;sessionStorage&#39;</span>
<span class="token punctuation">)</span>

<span class="token function">pinia</span><span class="token punctuation">(</span>piniaPlugin<span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setupStore</span><span class="token punctuation">(</span>app<span class="token operator">:</span> App<span class="token operator">&lt;</span>Element<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>pinia<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> pinia <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pinia本地存储插件实现" tabindex="-1"><a class="header-anchor" href="#pinia本地存储插件实现"><span><code>pinia</code>本地存储插件实现</span></a></h2><p>1.这里用一个存储的key代表一组数据，比如<code>tokenStore： defineStore(&#39;tokenStore&#39;, () =&gt; {})</code>,然后将这个值存在window的本地存储中，默认值给本地存储的值，当$store这个值发生变化的时候，同步更新window的本地存储</p><p>2.这里是使用<code>watch</code>来监听</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> PiniaPlugin<span class="token punctuation">,</span> PiniaPluginContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">type</span> <span class="token class-name">storageType</span> <span class="token operator">=</span> <span class="token string">&#39;localStorage&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;sessionStorage&#39;</span>

<span class="token keyword">function</span> <span class="token function">piniaStoragePluginCreator</span><span class="token punctuation">(</span>storeIdList<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> storageType<span class="token operator">?</span><span class="token operator">:</span> storageType<span class="token punctuation">)</span><span class="token operator">:</span> PiniaPlugin

<span class="token keyword">function</span> <span class="token function">piniaStoragePluginCreator</span><span class="token punctuation">(</span>storeId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> storageType<span class="token operator">?</span><span class="token operator">:</span> storageType<span class="token punctuation">)</span><span class="token operator">:</span> PiniaPlugin

<span class="token keyword">function</span> <span class="token function">piniaStoragePluginCreator</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> storageType<span class="token operator">:</span> storageType <span class="token operator">=</span> <span class="token string">&#39;localStorage&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ctx<span class="token operator">:</span> PiniaPluginContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> <span class="token punctuation">{</span> $id<span class="token punctuation">,</span> $state <span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>store
            <span class="token keyword">if</span> <span class="token punctuation">(</span>$id <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ctx<span class="token punctuation">.</span>store<span class="token punctuation">.</span>$state <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>window<span class="token punctuation">[</span>storageType<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>$id<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span>
                <span class="token function">watch</span><span class="token punctuation">(</span>
                    $state<span class="token punctuation">,</span>
                    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                        window<span class="token punctuation">[</span>storageType<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>$id<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>$state<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token punctuation">{</span> deep<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
                <span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>ctx<span class="token operator">:</span> PiniaPluginContent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> <span class="token punctuation">{</span> $id<span class="token punctuation">,</span> $state <span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>store
            <span class="token keyword">const</span> length <span class="token operator">=</span> value<span class="token punctuation">.</span>length
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>$id <span class="token operator">===</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    ctx<span class="token punctuation">.</span>store<span class="token punctuation">.</span>$state <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>
                        window<span class="token punctuation">[</span>StorageType<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>$id<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">any</span>
                    <span class="token punctuation">)</span>
                    <span class="token function">watch</span><span class="token punctuation">(</span>
                        $state<span class="token punctuation">,</span>
                        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                            window<span class="token punctuation">[</span>storageType<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>$id<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>$state<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">}</span><span class="token punctuation">,</span>
                        <span class="token punctuation">{</span> deep<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
                    <span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> piniaStoragePluginCreator
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>一个系统通常需要的几个store如下:</p><p><code>userInfoStore</code>： 表示登录后的用户信息</p><p><code>menuStore</code>: 表示该用户有的菜单权限</p><p><code>permissionStore</code>： 表示该用户的权限</p><p><code>settingStore</code>： 系统设置</p></blockquote><h2 id="实现一个userinfo的store" tabindex="-1"><a class="header-anchor" href="#实现一个userinfo的store"><span>实现一个<code>userInfo</code>的<code>Store</code></span></a></h2><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@vue/reactivity&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> useUserInfo <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;userInfoStore&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span>userModal<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    
    <span class="token comment">// 设置用户信息</span>
    <span class="token keyword">const</span> <span class="token function-variable function">setUserInfo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        userInfo<span class="token punctuation">.</span>value <span class="token operator">=</span> info
        <span class="token function">setCookie</span><span class="token punctuation">(</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>token<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">interface</span> <span class="token class-name">userModal</span> <span class="token punctuation">{</span>
        token<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
        name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
        phone<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
        token<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 获取用户信息</span>
    <span class="token keyword">const</span> <span class="token function-variable function">getUserInfo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>userModal <span class="token punctuation">{</span>
        <span class="token keyword">return</span> userInfo<span class="token punctuation">.</span>value
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 清除用户信息</span>
    <span class="token keyword">const</span> <span class="token function-variable function">clearUserInfo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        userInfo<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token punctuation">{</span> userInfo<span class="token punctuation">,</span> setUserInfo<span class="token punctuation">,</span> getUserInfo<span class="token punctuation">,</span> clearUserInfo <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现一个系统设置的store" tabindex="-1"><a class="header-anchor" href="#实现一个系统设置的store"><span>实现一个系统设置的<code>store</code></span></a></h2><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> useSetting <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;settingStore&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> collapsed <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// 这个是菜单是否折叠</span>
    
    <span class="token keyword">const</span> <span class="token function-variable function">toggleCollapsed</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        collapsed<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">!</span>collapsed<span class="token punctuation">.</span>value
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        collapsed<span class="token punctuation">,</span>
        toggleCollapsed
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","3.store.html.vue"]]),d=JSON.parse('{"path":"/xiangmu/houtaiguanli/3.store.html","title":"全局数据管理","lang":"zh-CN","frontmatter":{"title":"全局数据管理","icon":"fab fa-markdown","order":3,"footer":false},"headers":[{"level":2,"title":"创建Pinia","slug":"创建pinia","link":"#创建pinia","children":[]},{"level":2,"title":"pinia本地存储插件实现","slug":"pinia本地存储插件实现","link":"#pinia本地存储插件实现","children":[]},{"level":2,"title":"实现一个userInfo的Store","slug":"实现一个userinfo的store","link":"#实现一个userinfo的store","children":[]},{"level":2,"title":"实现一个系统设置的store","slug":"实现一个系统设置的store","link":"#实现一个系统设置的store","children":[]}],"git":{"createdTime":1709263503000,"updatedTime":1709354699000,"contributors":[{"name":"zhuqi","email":"zhuqi","commits":4}]},"readingTime":{"minutes":1.64,"words":492},"filePathRelative":"xiangmu/houtaiguanli/3.store.md","localizedDate":"2024年3月1日"}');export{k as comp,d as data};
